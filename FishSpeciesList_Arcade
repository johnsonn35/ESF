// Access 'AdvisoriesKent redo' related table as a FeatureSet 
// This should be done from the map in case there are filters that prevent some data from showing
var relatedTable = FeatureSetByName($map, "AdvisoriesKent redo")

// Define a common attribute, then create a filter statement based on that attribute
// Want to get features where GUID from waterbodies table matches GUID in advisories table
var commonAttr = StandardizeGuid($feature.GUID, 'digits-hyphen-braces')
var filterStatement = 'GUID = @commonAttr'

// Now, actually filter the data and assign it to a variable
var relatedData = Filter(relatedTable, filterStatement)

// Sort it alphabetically by species
var relatedDataSorted = OrderBy(relatedData, 'Fish ASC')

// Create an empty pop-up string
var popupString = ''

// Iterate through advisories
for (var f in relatedDataSorted){

    var serv = ''

    if(f.MI_Servings_per_month == "Limited"){
        serv += f.MI_Servings_per_month + " servings per year";
    } else if (f.MI_Servings_per_month == "Do Not Eat"){
        serv += f.MI_Servings_per_month;
    } else if (f.MI_Servings_per_month == '6 Per Year'){
        serv += "6 servings per year";
    } else if (f.MI_Servings_per_month == '1'){
        serv += f.MI_Servings_per_month + " serving per month";
    } else {
        serv += f.MI_Servings_per_month + " servings per month";
    }

    var canDouble = ''

    if(f.Servings_double=="No"){
        canDouble += "Do not double servings.";
    } else {
        canDouble += "You can safely double the servings listed here by following the 3Cs.";
    } 

    popupString += f.Fish + ",  " + f.Size + ":" + TextFormatting.NewLine +
        serv + " due to " + f.Chemical_of_concern + ". " + canDouble + TextFormatting.NewLine +
        TextFormatting.NewLine
}

DefaultValue(popupString, 'There are no advisories for this body of water. Check the published guides at michigan.gov/EatSafeFish.')
